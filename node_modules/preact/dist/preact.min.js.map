{"version":3,"sources":["../src/h.js","../src/util.js","../src/clone-element.js","../src/linked-state.js","../src/render-queue.js","../src/vdom/functional-component.js","../src/vdom/index.js","../src/dom/index.js","../src/dom/recycler.js","../src/vdom/diff.js","../src/vdom/component-recycler.js","../src/vdom/component.js","../src/component.js","../src/constants.js","../src/render.js"],"names":["children","lastSimple","child","simple","i","arguments","length","stack","push","attributes","pop","Array","String","props","obj","extend","p","key","split","str","prop","c","h","vnode","nodeName","clone","slice","call","path","component","state","v","setState","enqueueRender","rerender","list","items","_dirty","renderComponent","buildFunctionalComponent","context","getNodeProps","EMPTY","node","_componentConstructor","isFunctionalComponent","isNamedNode","normalizedNodeName","toLowerCase","defaultProps","removeNode","parentNode","name","isSvg","value","isString","old","style","cssText","NON_DIMENSION_PROPS","innerHTML","__html","l","_listeners","substring","addEventListener","eventProxy","NON_BUBBLING_EVENTS","removeEventListener","removeAttribute","ns","match","removeAttributeNS","isFunction","setAttributeNS","setAttribute","setProperty","e","this","type","options","event","collectNode","_name","createNode","componentDidMount","ret","idiff","dom","mountAll","diffLevel","Text","recollectNodeTree","buildComponentFromVNode","out","vchildren","isSvgMode","firstChild","appendChild","ATTR_KEY","a","hydrating","fc","nextSibling","nodeValue","diffAttributes","ref","j","vchild","vlen","len","_child","originalChildren","_component","__key","keyedLen","absorb","childrenLen","min","isSameNodeType","undefined","keyed","unmountOnly","lastChild","attrs","setAccessor","createComponent","Ctor","components","Component","inst","constructor","splice","componentWillMount","componentWillReceiveProps","prevProps","_disable","opts","syncComponentUpdates","base","__ref","cbase","previousProps","previousState","prevState","isUpdate","nextBase","initialBase","initialChildComponent","previousContext","shouldComponentUpdate","skip","componentWillUpdate","prevContext","render","rendered","getChildContext","toUnmount","childComponent","childProps","baseParent","replaceChild","unmountComponent","isChild","componentRef","t","_parentComponent","mounts","unshift","componentDidUpdate","afterUpdate","fn","cb","_renderCallbacks","flushMounts","isOwner","setComponentProps","originalComponent","isDirectOwner","oldDom","remove","componentWillUnmount","inner","componentDidUnmount","s","lcCache","defer","resolved","f","then","boxFlex","boxFlexGroup","columnCount","fillOpacity","flex","flexGrow","opacity","order","orphans","strokeOpacity","widows","zIndex","zoom","callback","forceUpdate","exports"],"mappings":"4RAiBO,GAAWA,GACbC,EAAUC,EAAiBC,EAAQC,CAAG,KAAAA,EAAAC,UAACC,OAAAF,KAAA,GACpCG,EAAAC,KAAUH,UAAWD,GAE3BK,IAAAA,EAAAT,WACaO,EAAID,QAAWC,EAAAC,KAAUC,EAAAT,gBACrBS,GAAQT,SAEzB,OAAAO,EAAAD,OACM,IAAMJ,EAAQK,EAAAG,gBAAAC,OACP,IAAMP,EAAGF,EAAEI,OAAaF,KAAKG,EAAEC,KAAAN,EAAAE,QACf,OAAfF,GAAqBA,KAAAA,GAAeA,KAAAA,IAErB,gBAATA,KAAgBA,GAASU,IACjCT,EAAyB,gBAAVD,GACVC,GAAOF,EACTD,EAAYA,EAAAM,OAAA,IAAAJ,IAGrBF,IAAAA,OAAAQ,KAAAN,GACUD,EAAaE,+ECjCxB,GAASU,EACJ,IAAA,GAAAT,KAAAS,GACIC,EAAAV,GAAKS,EAAAT,EACnB,OAAAU,iBAQK,MAAeC,MAAKD,mBAQpB,IAAS,GAAME,GAAKC,EAAKC,MAAA,KAAAd,EAAA,EAAAA,EAAAY,EAAAV,QAAAQ,EAAAV,IACrBU,EAAKA,EAAAE,EAAMZ,GAEpB,OAAAU,iBAMK,MAAS,kBAAgBA,iBAMzB,MAAS,gBAAcA,iBAQvB,GAASK,GAAA,EACR,KAAK,GAACC,KAAAC,GACAA,EAAID,KACHD,IAAAA,GAAA,KACAA,GAAQC,EAGrB,OAAAD,mBClDK,MAASG,GAAAC,EAAaC,SAAOT,EAAOU,EAAAF,EAAAd,YAAAI,GAAAR,UAAAC,OAAA,KAAAoB,MAAAC,KAAAtB,UAAA,GAAAkB,EAAAvB,kECM3B,+GAAAI,EAAAwB,EAAkBtB,OAAS,EAAEF,IAC7BU,EAAMA,EAAIc,EAACxB,MAAAU,EAAAc,EAAAxB,KAAAA,GAAAyB,EAAAC,MAAAF,EAAAxB,QAEhBU,GAAKc,EAACxB,IAAU2B,EACnBF,EAAKG,SAAAF,IASV,QAAAG,GAAAJ,uECfC,QAAQK,WAEIC,EAAAC,CACVA,KACH,OAAQpB,EAAAmB,EAAAzB,MACTM,EAAAqB,QAAAC,EAAAtB,gGCCMuB,GAAuBhB,EAAaiB,GAC3C,MAAAjB,GAAAC,SAAAiB,EAAAlB,GAAAiB,GAAAE,wHCLeC,EAAeC,uBAAaD,EAAAC,wBAAArB,EAAAC,UAAAqB,EAAAtB,kBAI/BuB,GAAOH,EAAWnB,SAChBmB,GAAAI,qBAAyBvB,GAAYwB,EAAYL,EAAQnB,YAAEwB,EAAAxB,+HAoB1DX,EAAaT,GAAO6C,EAAA7C,GAK/B,OAAAS,GAKF,QAAAqC,GAAAP,GACD,GAAA3B,GAAA2B,EAAAQ,qDCtBK,6EAAqB,QAAZC,OAEJ,IAAa,UAAbA,GAAoBC,EAEpB,GAAgB,UAATD,GAIP,KAHFE,GAAgBC,EAAOD,IAAAC,EAAAC,MAC/Bb,EAAAc,MAAAC,QAAAJ,GAAA,IAEeA,GAAE,gBAAAA,GAAA,UAGF,IAAO,GAAKlD,KAAKoD,GACHpD,IAAAkD,KAAAX,EAAAc,MAAArD,GAAA,GAIjB,KAAU,GAAAA,KAASkD,GAC9BX,EAAAc,MAAArD,GAAA,gBAAAkD,GAAAlD,IAAAuD,EAAAvD,GAAAkD,EAAAlD,GAAAkD,EAAAlD,GAAA,UAGe,IAAG,4BAAAgD,EAAaE,IAAQX,EAAKiB,UAAcN,EAAAO,QAAA,QAAA,IAAA,KAAAT,EAAA,IAAA,KAAAA,EAAA,GAAA,CACzD,GAAAU,GAAAnB,EAAAoB,aAAApB,EAAAoB,cACSX,GAASJ,EAAEI,EAAAY,UAAA,IAGrBV,EAEcQ,EAAAV,IAAAT,EAAAsB,iBAA2Bb,EAAAc,IAAAC,EAAAf,IAC1BU,EAASV,IAEVT,EAAEyB,oBAAmBhB,EAAEc,IAAAC,EAAAf,IAE/BU,EAAAV,GAAgBE,iEAGZ,MAAAA,GAAAA,KAAAA,GAAAX,EAAA0B,gBAAAjB,OACI,CAEJ,GAAIkB,GAAGjB,GAAAD,EAAAmB,MAAA,gBACQ,OAApBjB,GAA0BA,KAAAA,EAC/BgB,EAAA3B,EAAA6B,kBAAA,+BAAAxB,EAAAsB,EAAA,KAAA3B,EAAA0B,gBAAAjB,GACe,gBAAAE,IAAAmB,EAAAnB,KAEDgB,EAAM3B,EAAI+B,eAAa,+BAA4B1B,EAAAsB,EAAA,IAAAhB,GAAAX,EAAAgC,aAAAvB,EAAAE,QAzCpCD,GAAAA,UAAAA,GAAAA,WAoDrBuB,GAAKjC,EAAcS,EAACE,GAE5B,IACDX,EAAAS,GAAAE,EACD,MAAAuB,aAOIX,GAAAW,GACE,MAAQC,MAAKf,WAACc,EAAAE,MAAAC,EAAAC,OAAAD,EAAAC,MAAAJ,IAAAA,GAQrB,QAASK,GAAcvC,MACfO,EAAKP,kEC7FC,IAAGwC,GAAAxC,EAAAI,oBAAAC,EAAAL,EAAAnB,6CAKR4D,GAAY5D,EAAS6B,GACvB,GAAAD,GAAUJ,EAAQxB,GAAAA,EAAAA,EAAAA,IAAAA,EAAAA,GAAAA,QAAAA,EAAAA,SAAAA,gBAAAA,6BAAAA,GAAAA,SAAAA,cAAAA,GAGjB,OADFmB,GAAII,mBAAQK,EACJT,eCIV,GAAAtB,iDAGYA,EAAAgE,mBAAMhE,EAAAgE,kGAoBhB,IAAAC,GAAWC,EAAEC,EAAAjE,EAAAiB,EAAAiD,kDAMjBC,4BASSH,GAAQC,EAACjE,EAAAiB,EAAAiD,sDAKRlE,EAAAgB,EAAAhB,EAAAiB,EASJ,IAJY,MAATjB,IAAeA,EAAA,IAIlBgC,EAAAhC,GAcA,MAZNiE,IAAAA,YAAAG,OAAAH,EAAArC,4CAQkBqC,GAAEI,EAAAJ,iCAILA,CAKV,IAAKf,EAAAlD,EAAiBC,UACpB,MAASqE,GAAsBL,EAAAjE,EAAAiB,EAAAiD,MAG5BK,GAACN,EACXhE,EAAAD,EAAAC,SAAAZ,GAAAY,EAAAA,EAIGuE,EAAiBxE,EAAQvB,YAKtBgG,EAAM,QAAAxE,GAAA,kBAAAA,GAAAwE,yBAgBJ,OAACR,EAAAS,WAAiBH,EAASI,YAAEV,EAAAS,6GAcnB,CAClBH,EAAAK,GAAAtF,4CAGYA,EAAAuF,EAAUhG,GAAAgD,MAAAgD,EAAAhG,GAAAkD,aAKX+C,IAAAN,GAAA,IAAAA,EAAAzF,QAAA,gBAAAyF,GAAA,IAAAO,GAAAA,YAAAX,QAAAW,EAAAC,YACED,EAAGE,WAAWT,EAAA,KAChBO,EAAIE,UAAYT,EAAI,6DAO9BU,EAAAX,EAAAvE,EAAAd,WAAAI,GAGO6F,IAAAA,EACMA,IAAKA,GAAAZ,kCA2BhBa,GACHtF,EACKuF,EACL1G,EAAAA,EAAAA,EAAAA,WAAAA,KAAAA,KAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,EAAAA,EAJO2G,EAAAd,GAAmBA,EAAWzF,MAMlC,IAAGwG,EACN,IAAW,GAAI1G,GAAA,EAAAA,EAAA0G,EAAA1G,IAAA,CACR,GAAA2G,GAAaC,EAAgB5G,GACnCS,EAAAkG,EAAAZ,GAAGlF,EAAA4F,GAAAxF,EAAA0F,EAAAE,YAAA5F,EAAA6F,MAAArG,EAAAA,EAAAI,IAAA,KAAA,IAAQ,OAAAA,GAAOkG,aAEXd,IAAAe,GAAAvG,GAAAkG,YAAApB,SACO3F,EAAOqH,KAAIN,MAKhBF,EACF,IAAO,GAAAzG,GAAM,EAAAA,EAAAyG,EAAAzG,IAAA,CAEXwG,EAASb,EAAU3F,GAClBF,EAAW,IAOZ,IAAAe,GAAa2F,EAAA3F,GACT,IAAA,MAAAA,0CAQE,KAAAf,GAAAoH,EAAAD,EACK,IAAIV,EAAKW,EAAEX,EAAAU,EAAAV,IAEN,GADJtF,EAAArB,EAAA2G,GACItF,GAAAkG,EAAAlG,EAAAuF,GAAA,CACZ1G,EAAAmB,EACXrB,EAAA2G,GAAAa,OACDb,IAAAU,EAAA,GAAAA,cAEsB,OAMfnH,EAAGqF,EAAWrF,EAAI0G,EAAWpE,EAAGiD,GAE/BvF,GAAAA,IAAAsF,IACNpF,GAAA0G,EACDtB,EAAAU,YAAAhG,GACDA,IAAA8G,EAAA5G,6DAYE,IAAA,GAAAA,KAAAqH,GACGA,EAAarH,IAAOwF,EAAmB6B,EAAIrH,eAO/CF,EAAUF,EAAAqH,KACCnH,GAAK0F,EAAA1F,GAOnB,QAAA0F,GAAAjD,EAAA+E,GACD,GAAA7F,GAAAc,EAAAsE,6BAQetE,EAAAwD,IAAwBxD,EAAAwD,GAAaO,KAAA/D,EAAAwD,GAAAO,IAAA,MAErCgB,GAAAA,EAAAA,QAST,OAAWrG,EAAEsB,EAAAgF,UAAA/B,EAAAvE,EAAAqG,IASlB,QAAAjB,GAAAjB,EAAAoC,EAAApE,oEAYG,IAAIoE,EACC,IAAOxE,IAAEwE,GACM,aAARxE,GAAiC,cAAPA,GAASA,IAAAI,IAAAoE,EAAAxE,MAAA,UAAAA,GAAA,YAAAA,EAAAoC,EAAApC,GAAAI,EAAAJ,KAChCyE,EAAUrC,EAAOpC,EAAII,EAAKJ,GAAGI,EAASJ,GAAEwE,EAAWxE,GAAA4C,wEC/SjE,QAAA8B,GAAgBC,EAAAlH,EAAA2B,oBAGNL,EAAA6F,GAAiBD,EAAS3E,KAExC,IADG6E,EAAOtG,KAAUuG,EAAArH,EAAY2B,GACzBL,EACE,IAAK,GAAK/B,GAAA+B,EAAS7B,OACxBF,KACL,GAAA+B,EAAA/B,GAAA+H,cAAAJ,EAAA,0BAGe5F,EAAgBiG,OAAMhI,EAAA,EAClB,OAIb,MAAM8H,2HCJGrG,EAAiBwG,oBAAmBxG,EAAMwG,qBAC3CxG,EAAUyG,2BACdzG,EAAWyG,0BAAKzH,EAAA2B,GAGrBA,GAAkBA,IAAYX,EAAOW,mDAErCX,EAAcW,QAAYA,GAIpBX,EAAA0G,YAAA1G,EAA+B0G,UAAW1G,EAAAhB,OACpDgB,EAAAhB,MAAAA,EAEGgB,EAAW2G,UAAAA,EAEG,IAAPC,IACV,IAAAA,GAAAzD,EAAA0D,wBAAAA,GAAA7G,EAAA8G,KAGc1G,EAASJ,GAHvB8G,EAAAA,EAAAA,EAAAA,IAOO9G,EAAG+G,OAAW/G,EAAA+G,MAAA/G,gDA0BdqG,EACPW,EAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,MAAAA,EAAAA,EAAAA,QAPcC,EAAgBjH,EAAW0G,WAAc1H,EACpDkI,EAAoBlH,EAAOmH,WAAAlH,EAAAA,EAAAA,EAAAA,aAAAA,EAEvBmH,EAAApH,EAAA8G,KAAEO,EAAQrH,EAAAqH,SACZC,EAAaF,GAAKC,EAClBE,EAAkBvH,EAAAoF,cAKvBgC,IACApH,EAAWhB,MAAUiI,EACrBjH,EAAcC,MAAQiH,EACtBlH,EAAAW,QAAwB6G,EACpB,IAAAZ,GAAA5G,EAAAyH,uBAAAzH,EAAAyH,sBAAAzI,EAAAiB,EAAAU,MAAAA,EAAO+G,GAAAA,EAAC1H,EAAA2H,qBAAA3H,EAAA2H,oBAAA3I,EAAAiB,EAAAU,GAIFX,EAAQhB,MAAAA,EACRgB,EAAQC,MAAAA,EACRD,EAAUW,QAAAA,GAKnBX,EACQ0G,UAAU1G,EAAAmH,UAAqBnH,EAAA4H,YAAA5H,EAAAqH,SAAA,OAC7B7G,QAAAA,GAEDkH,EAAK,CACL1H,EAAc6H,SAAAC,EAAA9H,EAAA6H,OAAA7I,EAAAiB,EAAAU,wBAIfA,EAAYzB,EAAUU,EAAAe,GAAYX,EAAU+H,mBAG3C,OAAA/G,EAAA8G,GACIA,EAAQpH,EAA4BoH,EAAOnH,EAGrD,IACOqH,GACVlB,EAFamB,EAAiBH,GAAAA,EAAAnI,QAIxB,IAAAiD,EAAAqF,GAAiC,WAIpC5B,GAAiBkB,EACLlB,GAACA,EAAAC,cAAA2B,GAAAC,EAAA9I,KAAAiH,EAAAhB,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,QAKCgB,EAAAJ,EAAuBgC,EAAAC,EAAAvH,GACjC0F,EAAAgB,SAAsBhB,EAAAgB,UAAAA,uBAEZrH,EAAAoF,WAAciB,IACIA,EAAE6B,EAAa,EAAAvH,GAE7CF,EAAA4F,EAAA,EAAAzC,GAAAA,IAGGkD,EAAAT,EAAgBS,SAElBE,GAAAM,IAGiBC,EACtBS,IAAAA,EAAAA,EAAAA,WAAAA,OAKOV,GAAY,IAAAV,gEAMnB,IAAAU,GAAAR,IAAAQ,GAAAjB,IAAAkB,EAAA,mBAEcY,IAAWrB,IAAWqB,IACpBA,EAAWC,aAAQtB,EAAAQ,GAEnCU,IACDV,EAAAlC,WAAA,YAWC,MAJKiD,EAAWL,EAAAlB,IAAAQ,GAGftH,EAAA8G,KAAAA,EACDA,IAAAwB,EAAA,CACD,GAAAC,GAAAvI,EAAAA,EAAAA,CAEY,OAAEwI,EAAAA,EAAAC,kBACGF,EAAeC,GAAA1B,KAAGA,iBAGtBA,EAAG/F,sBAAKwH,EAAAjC,cAIZc,GAAGxD,EACV8E,EAAYC,QAAU3I,GACvB0H,IACI1H,EAAa4I,oBACb5I,EAAA4I,mBAAqC3B,EAAYC,EAAAM,GAEvDrE,EAAA0F,aAAA1F,EAAA0F,YAAA7I,GAGM,IAEE8I,GAFDC,EAAQ/I,EAAUgJ,gBAGrB,IAAAD,EAAU,MAAAD,EAAAC,EAAAlK,MAAoBiK,EAAAhJ,KAAAE,EAEjC6D,IAAAyE,GAAAW,gJAkBaC,EAAA1J,EAAA8G,cAA6B5G,EAAOC,QA4B5C,OAzBAH,IAAM0J,KAAAtF,GAAApE,EAAA4F,aACZ+D,EAAyB3J,EAAAR,EAAA,EAAA2B,EAAqBiD,GACvCD,EAAGnE,EAAAsH,OAEEsC,IAAgBC,IAChBhB,EAAce,GAAAA,GAC1BzF,EAAA2F,EAAA,UAG4B5J,EAAAC,SAAcX,EAAS2B,GACtCgD,IAAAnE,EAAA6H,WAET7H,EAAA6H,SAAA1D,IAEc,MAEjBwF,EAAA3J,EAAAR,EAAA,EAAA2B,EAAAiD,YAGa0F,GAAU3F,IAAA2F,IACVA,EAAIlE,WAAA,YAKLzB,EASd,QAAA0E,GAAArI,EAAAuJ,kEASevJ,EAAAwJ,sBAAkCxJ,EAAEwJ,yDAMzCC,EAAAA,EAAAA,EAAAA,OAEI,IAAA3C,EAAA,6CAKFyC,IACDlI,EAAAyF,KACqB9G,GAGtB,IAAAR,iCAKSuH,OAAA/G,EAAA+G,MAAA,QACA2C,qBAAW1J,EAAA0J,qDCjQxBzG,KAAStC,QAAUA,EAEpBsC,KAAMjE,MAAQA,8FXyChBmC,EAAa,SAAAwI,GACJ,MAAWC,GAAGD,KAAdC,EAAWD,GAAIA,EAAAxI,iEAMxB0I,EAAWC,EAAO,SAAUC,GACnBD,EAAQE,KAAQD,0FY/DhBjI,GACAmI,QAAY,EAAIC,aAAC,EAAAC,YAAA,EAAAC,YAAA,EAAAC,KAAA,EAAAC,SAAA,mFAEjBC,QAAW,EAAAC,MAAA,EAAAC,QAAA,EAAAC,cAAA,EAAAC,OAAA,EAAAC,OAAA,EAAAC,KAAA,uDValBtK,UKDCmI,KAGD7E,EAAA,aCySHsC,6IG7PO,SAAMlG,EAAA6K,GACN,GAAKnB,GAAA1G,KAAAhD,KACAgD,MAAAkE,YAAgBlE,KAAIkE,UAAWvH,EAAG+J,IAC/CzK,EAAAyK,EAAA/G,EAAA3C,GAAAA,EAAA0J,EAAA1G,KAAAjE,OAAAiB,yEASM8K,YAAI,WACNtK,EAAgBwC,KAAA,0EE9Df+H,EAAS3K,SAAcA,IACtB8C,QAAYA","file":"preact.min.js","sourcesContent":["import { VNode } from './vnode';\nimport options from './options';\n\n\nconst stack = [];\n\nconst EMPTY_CHILDREN = [];\n\n/** JSX/hyperscript reviver\n*\tBenchmarks: https://esbench.com/bench/57ee8f8e330ab09900a1a1a0\n *\t@see http://jasonformat.com/wtf-is-jsx\n *\t@public\n *  @example\n *  /** @jsx h *\\/\n *  import { render, h } from 'preact';\n *  render(<span>foo</span>, document.body);\n */\nexport function h(nodeName, attributes) {\n\tlet children, lastSimple, child, simple, i;\n\tfor (i=arguments.length; i-- > 2; ) {\n\t\tstack.push(arguments[i]);\n\t}\n\tif (attributes && attributes.children) {\n\t\tif (!stack.length) stack.push(attributes.children);\n\t\tdelete attributes.children;\n\t}\n\twhile (stack.length) {\n\t\tif ((child = stack.pop()) instanceof Array) {\n\t\t\tfor (i=child.length; i--; ) stack.push(child[i]);\n\t\t}\n\t\telse if (child!=null && child!==true && child!==false) {\n\t\t\tif (typeof child=='number') child = String(child);\n\t\t\tsimple = typeof child=='string';\n\t\t\tif (simple && lastSimple) {\n\t\t\t\tchildren[children.length-1] += child;\n\t\t\t}\n\t\t\telse {\n\t\t\t\t(children || (children = [])).push(child);\n\t\t\t\tlastSimple = simple;\n\t\t\t}\n\t\t}\n\t}\n\n\tlet p = new VNode(nodeName, attributes || undefined, children || EMPTY_CHILDREN);\n\n\t// if a \"vnode hook\" is defined, pass every created VNode to it\n\tif (options.vnode) options.vnode(p);\n\n\treturn p;\n}\n","/** Copy own-properties from `props` onto `obj`.\n *\t@returns obj\n *\t@private\n */\nexport function extend(obj, props) {\n\tif (props) {\n\t\tfor (let i in props) obj[i] = props[i];\n\t}\n\treturn obj;\n}\n\n\n/** Fast clone. Note: does not filter out non-own properties.\n *\t@see https://esbench.com/bench/56baa34f45df6895002e03b6\n */\nexport function clone(obj) {\n\treturn extend({}, obj);\n}\n\n\n/** Get a deep property value from the given object, expressed in dot-notation.\n *\t@private\n */\nexport function delve(obj, key) {\n\tfor (let p=key.split('.'), i=0; i<p.length && obj; i++) {\n\t\tobj = obj[p[i]];\n\t}\n\treturn obj;\n}\n\n\n/** @private is the given object a Function? */\nexport function isFunction(obj) {\n\treturn 'function'===typeof obj;\n}\n\n\n/** @private is the given object a String? */\nexport function isString(obj) {\n\treturn 'string'===typeof obj;\n}\n\n\n/** Convert a hashmap of CSS classes to a space-delimited className string\n *\t@private\n */\nexport function hashToClassName(c) {\n\tlet str = '';\n\tfor (let prop in c) {\n\t\tif (c[prop]) {\n\t\t\tif (str) str += ' ';\n\t\t\tstr += prop;\n\t\t}\n\t}\n\treturn str;\n}\n\n\n/** Just a memoized String#toLowerCase */\nlet lcCache = {};\nexport const toLowerCase = s => lcCache[s] || (lcCache[s] = s.toLowerCase());\n\n\n/** Call a function asynchronously, as soon as possible.\n *\t@param {Function} callback\n */\nlet resolved = typeof Promise!=='undefined' && Promise.resolve();\nexport const defer = resolved ? (f => { resolved.then(f); }) : setTimeout;\n","import { clone, extend } from './util';\nimport { h } from './h';\n\nexport function cloneElement(vnode, props) {\n\treturn h(\n\t\tvnode.nodeName,\n\t\textend(clone(vnode.attributes), props),\n\t\targuments.length>2 ? [].slice.call(arguments, 2) : vnode.children\n\t);\n}\n","import { isString, delve } from './util';\n\n/** Create an Event handler function that sets a given state property.\n *\t@param {Component} component\tThe component whose state should be updated\n *\t@param {string} key\t\t\t\tA dot-notated key path to update in the component's state\n *\t@param {string} eventPath\t\tA dot-notated key path to the value that should be retrieved from the Event or component\n *\t@returns {function} linkedStateHandler\n *\t@private\n */\nexport function createLinkedState(component, key, eventPath) {\n\tlet path = key.split('.');\n\treturn function(e) {\n\t\tlet t = e && e.target || this,\n\t\t\tstate = {},\n\t\t\tobj = state,\n\t\t\tv = isString(eventPath) ? delve(e, eventPath) : t.nodeName ? (t.type.match(/^che|rad/) ? t.checked : t.value) : e,\n\t\t\ti = 0;\n\t\tfor ( ; i<path.length-1; i++) {\n\t\t\tobj = obj[path[i]] || (obj[path[i]] = !i && component.state[path[i]] || {});\n\t\t}\n\t\tobj[path[i]] = v;\n\t\tcomponent.setState(state);\n\t};\n}\n","import options from './options';\nimport { defer } from './util';\nimport { renderComponent } from './vdom/component';\n\n/** Managed queue of dirty components to be re-rendered */\n\n// items/itemsOffline swap on each rerender() call (just a simple pool technique)\nlet items = [];\n\nexport function enqueueRender(component) {\n\tif (!component._dirty && (component._dirty = true) && items.push(component)==1) {\n\t\t(options.debounceRendering || defer)(rerender);\n\t}\n}\n\n\nexport function rerender() {\n\tlet p, list = items;\n\titems = [];\n\twhile ( (p = list.pop()) ) {\n\t\tif (p._dirty) renderComponent(p);\n\t}\n}\n","import { EMPTY } from '../constants';\nimport { getNodeProps } from './index';\nimport { isFunction } from '../util';\n\n\n/** Check if a VNode is a reference to a stateless functional component.\n *\tA function component is represented as a VNode whose `nodeName` property is a reference to a function.\n *\tIf that function is not a Component (ie, has no `.render()` method on a prototype), it is considered a stateless functional component.\n *\t@param {VNode} vnode\tA VNode\n *\t@private\n */\nexport function isFunctionalComponent(vnode) {\n\tlet nodeName = vnode && vnode.nodeName;\n\treturn nodeName && isFunction(nodeName) && !(nodeName.prototype && nodeName.prototype.render);\n}\n\n\n\n/** Construct a resultant VNode from a VNode referencing a stateless functional component.\n *\t@param {VNode} vnode\tA VNode with a `nodeName` property that is a reference to a function.\n *\t@private\n */\nexport function buildFunctionalComponent(vnode, context) {\n\treturn vnode.nodeName(getNodeProps(vnode), context || EMPTY);\n}\n","import { clone, isString, isFunction, toLowerCase } from '../util';\nimport { isFunctionalComponent } from './functional-component';\n\n\n/** Check if two nodes are equivalent.\n *\t@param {Element} node\n *\t@param {VNode} vnode\n *\t@private\n */\nexport function isSameNodeType(node, vnode) {\n\tif (isString(vnode)) {\n\t\treturn node instanceof Text;\n\t}\n\tif (isString(vnode.nodeName)) {\n\t\treturn !node._componentConstructor && isNamedNode(node, vnode.nodeName);\n\t}\n\tif (isFunction(vnode.nodeName)) {\n\t\treturn (node._componentConstructor ? node._componentConstructor===vnode.nodeName : true) || isFunctionalComponent(vnode);\n\t}\n}\n\n\nexport function isNamedNode(node, nodeName) {\n\treturn node.normalizedNodeName===nodeName || toLowerCase(node.nodeName)===toLowerCase(nodeName);\n}\n\n\n/**\n * Reconstruct Component-style `props` from a VNode.\n * Ensures default/fallback values from `defaultProps`:\n * Own-properties of `defaultProps` not present in `vnode.attributes` are added.\n * @param {VNode} vnode\n * @returns {Object} props\n */\nexport function getNodeProps(vnode) {\n\tlet props = clone(vnode.attributes);\n\tprops.children = vnode.children;\n\n\tlet defaultProps = vnode.nodeName.defaultProps;\n\tif (defaultProps) {\n\t\tfor (let i in defaultProps) {\n\t\t\tif (props[i]===undefined) {\n\t\t\t\tprops[i] = defaultProps[i];\n\t\t\t}\n\t\t}\n\t}\n\n\treturn props;\n}\n","import { NON_DIMENSION_PROPS, NON_BUBBLING_EVENTS } from '../constants';\nimport options from '../options';\nimport { toLowerCase, isString, isFunction, hashToClassName } from '../util';\n\n\n\n\n/** Removes a given DOM Node from its parent. */\nexport function removeNode(node) {\n\tlet p = node.parentNode;\n\tif (p) p.removeChild(node);\n}\n\n\n/** Set a named attribute on the given Node, with special behavior for some names and event handlers.\n *\tIf `value` is `null`, the attribute/handler will be removed.\n *\t@param {Element} node\tAn element to mutate\n *\t@param {string} name\tThe name/key to set, such as an event or attribute name\n *\t@param {any} old\tThe last value that was set for this name/node pair\n *\t@param {any} value\tAn attribute value, such as a function to be used as an event handler\n *\t@param {Boolean} isSvg\tAre we currently diffing inside an svg?\n *\t@private\n */\nexport function setAccessor(node, name, old, value, isSvg) {\n\n\tif (name==='className') name = 'class';\n\n\tif (name==='class' && value && typeof value==='object') {\n\t\tvalue = hashToClassName(value);\n\t}\n\n\tif (name==='key') {\n\t\t// ignore\n\t}\n\telse if (name==='class' && !isSvg) {\n\t\tnode.className = value || '';\n\t}\n\telse if (name==='style') {\n\t\tif (!value || isString(value) || isString(old)) {\n\t\t\tnode.style.cssText = value || '';\n\t\t}\n\t\tif (value && typeof value==='object') {\n\t\t\tif (!isString(old)) {\n\t\t\t\tfor (let i in old) if (!(i in value)) node.style[i] = '';\n\t\t\t}\n\t\t\tfor (let i in value) {\n\t\t\t\tnode.style[i] = typeof value[i]==='number' && !NON_DIMENSION_PROPS[i] ? (value[i]+'px') : value[i];\n\t\t\t}\n\t\t}\n\t}\n\telse if (name==='dangerouslySetInnerHTML') {\n\t\tif (value) node.innerHTML = value.__html || '';\n\t}\n\telse if (name[0]=='o' && name[1]=='n') {\n\t\tlet l = node._listeners || (node._listeners = {});\n\t\tname = toLowerCase(name.substring(2));\n\t\t// @TODO: this might be worth it later, un-breaks focus/blur bubbling in IE9:\n\t\t// if (node.attachEvent) name = name=='focus'?'focusin':name=='blur'?'focusout':name;\n\t\tif (value) {\n\t\t\tif (!l[name]) node.addEventListener(name, eventProxy, !!NON_BUBBLING_EVENTS[name]);\n\t\t}\n\t\telse if (l[name]) {\n\t\t\tnode.removeEventListener(name, eventProxy, !!NON_BUBBLING_EVENTS[name]);\n\t\t}\n\t\tl[name] = value;\n\t}\n\telse if (name!=='list' && name!=='type' && !isSvg && name in node) {\n\t\tsetProperty(node, name, value==null ? '' : value);\n\t\tif (value==null || value===false) node.removeAttribute(name);\n\t}\n\telse {\n\t\tlet ns = isSvg && name.match(/^xlink\\:?(.+)/);\n\t\tif (value==null || value===false) {\n\t\t\tif (ns) node.removeAttributeNS('http://www.w3.org/1999/xlink', toLowerCase(ns[1]));\n\t\t\telse node.removeAttribute(name);\n\t\t}\n\t\telse if (typeof value!=='object' && !isFunction(value)) {\n\t\t\tif (ns) node.setAttributeNS('http://www.w3.org/1999/xlink', toLowerCase(ns[1]), value);\n\t\t\telse node.setAttribute(name, value);\n\t\t}\n\t}\n}\n\n\n/** Attempt to set a DOM property to the given value.\n *\tIE & FF throw for certain property-value combinations.\n */\nfunction setProperty(node, name, value) {\n\ttry {\n\t\tnode[name] = value;\n\t} catch (e) { }\n}\n\n\n/** Proxy an event to hooked event handlers\n *\t@private\n */\nfunction eventProxy(e) {\n\treturn this._listeners[e.type](options.event && options.event(e) || e);\n}\n","import { toLowerCase } from '../util';\nimport { removeNode } from './index';\n\n/** DOM node pool, keyed on nodeName. */\n\nconst nodes = {};\n\nexport function collectNode(node) {\n\tremoveNode(node);\n\n\tif (node instanceof Element) {\n\t\tnode._component = node._componentConstructor = null;\n\n\t\tlet name = node.normalizedNodeName || toLowerCase(node.nodeName);\n\t\t(nodes[name] || (nodes[name] = [])).push(node);\n\t}\n}\n\n\nexport function createNode(nodeName, isSvg) {\n\tlet name = toLowerCase(nodeName),\n\t\tnode = nodes[name] && nodes[name].pop() || (isSvg ? document.createElementNS('http://www.w3.org/2000/svg', nodeName) : document.createElement(nodeName));\n\tnode.normalizedNodeName = name;\n\treturn node;\n}\n","import { ATTR_KEY } from '../constants';\nimport { isString, isFunction } from '../util';\nimport { isSameNodeType, isNamedNode } from './index';\nimport { isFunctionalComponent, buildFunctionalComponent } from './functional-component';\nimport { buildComponentFromVNode } from './component';\nimport { setAccessor, removeNode } from '../dom/index';\nimport { createNode, collectNode } from '../dom/recycler';\nimport { unmountComponent } from './component';\nimport options from '../options';\n\n\n/** Queue of components that have been mounted and are awaiting componentDidMount */\nexport const mounts = [];\n\n/** Diff recursion count, used to track the end of the diff cycle. */\nexport let diffLevel = 0;\n\n/** Global flag indicating if the diff is currently within an SVG */\nlet isSvgMode = false;\n\n/** Global flag indicating if the diff is performing hydration */\nlet hydrating = false;\n\n/** Invoke queued componentDidMount lifecycle methods */\nexport function flushMounts() {\n\tlet c;\n\twhile ((c=mounts.pop())) {\n\t\tif (options.afterMount) options.afterMount(c);\n\t\tif (c.componentDidMount) c.componentDidMount();\n\t}\n}\n\n\n/** Apply differences in a given vnode (and it's deep children) to a real DOM Node.\n *\t@param {Element} [dom=null]\t\tA DOM node to mutate into the shape of the `vnode`\n *\t@param {VNode} vnode\t\t\tA VNode (with descendants forming a tree) representing the desired DOM structure\n *\t@returns {Element} dom\t\t\tThe created/mutated element\n *\t@private\n */\nexport function diff(dom, vnode, context, mountAll, parent, componentRoot) {\n\t// diffLevel having been 0 here indicates initial entry into the diff (not a subdiff)\n\tif (!diffLevel++) {\n\t\t// when first starting the diff, check if we're diffing an SVG or within an SVG\n\t\tisSvgMode = parent && typeof parent.ownerSVGElement!=='undefined';\n\n\t\t// hydration is inidicated by the existing element to be diffed not having a prop cache\n\t\thydrating = dom && !(ATTR_KEY in dom);\n\t}\n\n\tlet ret = idiff(dom, vnode, context, mountAll);\n\n\t// append the element if its a new parent\n\tif (parent && ret.parentNode!==parent) parent.appendChild(ret);\n\n\t// diffLevel being reduced to 0 means we're exiting the diff\n\tif (!--diffLevel) {\n\t\thydrating = false;\n\t\t// invoke queued componentDidMount lifecycle methods\n\t\tif (!componentRoot) flushMounts();\n\t}\n\n\treturn ret;\n}\n\n\nfunction idiff(dom, vnode, context, mountAll) {\n\tlet ref = vnode && vnode.attributes && vnode.attributes.ref;\n\n\n\t// Resolve ephemeral Pure Functional Components\n\twhile (isFunctionalComponent(vnode)) {\n\t\tvnode = buildFunctionalComponent(vnode, context);\n\t}\n\n\n\t// empty values (null & undefined) render as empty Text nodes\n\tif (vnode==null) vnode = '';\n\n\n\t// Fast case: Strings create/update Text nodes.\n\tif (isString(vnode)) {\n\t\t// update if it's already a Text node\n\t\tif (dom && dom instanceof Text && dom.parentNode) {\n\t\t\tif (dom.nodeValue!=vnode) {\n\t\t\t\tdom.nodeValue = vnode;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// it wasn't a Text node: replace it with one and recycle the old Element\n\t\t\tif (dom) recollectNodeTree(dom);\n\t\t\tdom = document.createTextNode(vnode);\n\t\t}\n\n\t\treturn dom;\n\t}\n\n\n\t// If the VNode represents a Component, perform a component diff.\n\tif (isFunction(vnode.nodeName)) {\n\t\treturn buildComponentFromVNode(dom, vnode, context, mountAll);\n\t}\n\n\n\tlet out = dom,\n\t\tnodeName = String(vnode.nodeName),\t// @TODO this masks undefined component errors as `<undefined>`\n\t\tprevSvgMode = isSvgMode,\n\t\tvchildren = vnode.children;\n\n\n\t// SVGs have special namespace stuff.\n\t// This tracks entering and exiting that namespace when descending through the tree.\n\tisSvgMode = nodeName==='svg' ? true : nodeName==='foreignObject' ? false : isSvgMode;\n\n\n\tif (!dom) {\n\t\t// case: we had no element to begin with\n\t\t// - create an element with the nodeName from VNode\n\t\tout = createNode(nodeName, isSvgMode);\n\t}\n\telse if (!isNamedNode(dom, nodeName)) {\n\t\t// case: Element and VNode had different nodeNames\n\t\t// - need to create the correct Element to match VNode\n\t\t// - then migrate children from old to new\n\n\t\tout = createNode(nodeName, isSvgMode);\n\n\t\t// move children into the replacement node\n\t\twhile (dom.firstChild) out.appendChild(dom.firstChild);\n\n\t\t// if the previous Element was mounted into the DOM, replace it inline\n\t\tif (dom.parentNode) dom.parentNode.replaceChild(out, dom);\n\n\t\t// recycle the old element (skips non-Element node types)\n\t\trecollectNodeTree(dom);\n\t}\n\n\n\tlet fc = out.firstChild,\n\t\tprops = out[ATTR_KEY];\n\n\t// Attribute Hydration: if there is no prop cache on the element,\n\t// ...create it and populate it with the element's attributes.\n\tif (!props) {\n\t\tout[ATTR_KEY] = props = {};\n\t\tfor (let a=out.attributes, i=a.length; i--; ) props[a[i].name] = a[i].value;\n\t}\n\n\t// Optimization: fast-path for elements containing a single TextNode:\n\tif (!hydrating && vchildren && vchildren.length===1 && typeof vchildren[0]==='string' && fc && fc instanceof Text && !fc.nextSibling) {\n\t\tif (fc.nodeValue!=vchildren[0]) {\n\t\t\tfc.nodeValue = vchildren[0];\n\t\t}\n\t}\n\t// otherwise, if there are existing or new children, diff them:\n\telse if (vchildren && vchildren.length || fc) {\n\t\tinnerDiffNode(out, vchildren, context, mountAll, !!props.dangerouslySetInnerHTML);\n\t}\n\n\n\t// Apply attributes/props from VNode to the DOM Element:\n\tdiffAttributes(out, vnode.attributes, props);\n\n\n\t// invoke original ref (from before resolving Pure Functional Components):\n\tif (ref) {\n\t\t(props.ref = ref)(out);\n\t}\n\n\tisSvgMode = prevSvgMode;\n\n\treturn out;\n}\n\n\n/** Apply child and attribute changes between a VNode and a DOM Node to the DOM.\n *\t@param {Element} dom\t\tElement whose children should be compared & mutated\n *\t@param {Array} vchildren\tArray of VNodes to compare to `dom.childNodes`\n *\t@param {Object} context\t\tImplicitly descendant context object (from most recent `getChildContext()`)\n *\t@param {Boolean} mountAll\n *\t@param {Boolean} absorb\t\tIf `true`, consumes externally created elements similar to hydration\n */\nfunction innerDiffNode(dom, vchildren, context, mountAll, absorb) {\n\tlet originalChildren = dom.childNodes,\n\t\tchildren = [],\n\t\tkeyed = {},\n\t\tkeyedLen = 0,\n\t\tmin = 0,\n\t\tlen = originalChildren.length,\n\t\tchildrenLen = 0,\n\t\tvlen = vchildren && vchildren.length,\n\t\tj, c, vchild, child;\n\n\tif (len) {\n\t\tfor (let i=0; i<len; i++) {\n\t\t\tlet child = originalChildren[i],\n\t\t\t\tprops = child[ATTR_KEY],\n\t\t\t\tkey = vlen ? ((c = child._component) ? c.__key : props ? props.key : null) : null;\n\t\t\tif (key!=null) {\n\t\t\t\tkeyedLen++;\n\t\t\t\tkeyed[key] = child;\n\t\t\t}\n\t\t\telse if (hydrating || absorb || props || child instanceof Text) {\n\t\t\t\tchildren[childrenLen++] = child;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (vlen) {\n\t\tfor (let i=0; i<vlen; i++) {\n\t\t\tvchild = vchildren[i];\n\t\t\tchild = null;\n\n\t\t\t// if (isFunctionalComponent(vchild)) {\n\t\t\t// \tvchild = buildFunctionalComponent(vchild);\n\t\t\t// }\n\n\t\t\t// attempt to find a node based on key matching\n\t\t\tlet key = vchild.key;\n\t\t\tif (key!=null) {\n\t\t\t\tif (keyedLen && key in keyed) {\n\t\t\t\t\tchild = keyed[key];\n\t\t\t\t\tkeyed[key] = undefined;\n\t\t\t\t\tkeyedLen--;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// attempt to pluck a node of the same type from the existing children\n\t\t\telse if (!child && min<childrenLen) {\n\t\t\t\tfor (j=min; j<childrenLen; j++) {\n\t\t\t\t\tc = children[j];\n\t\t\t\t\tif (c && isSameNodeType(c, vchild)) {\n\t\t\t\t\t\tchild = c;\n\t\t\t\t\t\tchildren[j] = undefined;\n\t\t\t\t\t\tif (j===childrenLen-1) childrenLen--;\n\t\t\t\t\t\tif (j===min) min++;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// morph the matched/found/created DOM child to match vchild (deep)\n\t\t\tchild = idiff(child, vchild, context, mountAll);\n\n\t\t\tif (child && child!==dom) {\n\t\t\t\tif (i>=len) {\n\t\t\t\t\tdom.appendChild(child);\n\t\t\t\t}\n\t\t\t\telse if (child!==originalChildren[i]) {\n\t\t\t\t\tif (child===originalChildren[i+1]) {\n\t\t\t\t\t\tremoveNode(originalChildren[i]);\n\t\t\t\t\t}\n\t\t\t\t\tdom.insertBefore(child, originalChildren[i] || null);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\tif (keyedLen) {\n\t\tfor (let i in keyed) if (keyed[i]) recollectNodeTree(keyed[i]);\n\t}\n\n\t// remove orphaned children\n\twhile (min<=childrenLen) {\n\t\tchild = children[childrenLen--];\n\t\tif (child) recollectNodeTree(child);\n\t}\n}\n\n\n\n/** Recursively recycle (or just unmount) a node an its descendants.\n *\t@param {Node} node\t\t\t\t\t\tDOM node to start unmount/removal from\n *\t@param {Boolean} [unmountOnly=false]\tIf `true`, only triggers unmount lifecycle, skips removal\n */\nexport function recollectNodeTree(node, unmountOnly) {\n\tlet component = node._component;\n\tif (component) {\n\t\t// if node is owned by a Component, unmount that component (ends up recursing back here)\n\t\tunmountComponent(component, !unmountOnly);\n\t}\n\telse {\n\t\t// If the node's VNode had a ref function, invoke it with null here.\n\t\t// (this is part of the React spec, and smart for unsetting references)\n\t\tif (node[ATTR_KEY] && node[ATTR_KEY].ref) node[ATTR_KEY].ref(null);\n\n\t\tif (!unmountOnly) {\n\t\t\tcollectNode(node);\n\t\t}\n\n\t\t// Recollect/unmount all children.\n\t\t// - we use .lastChild here because it causes less reflow than .firstChild\n\t\t// - it's also cheaper than accessing the .childNodes Live NodeList\n\t\tlet c;\n\t\twhile ((c=node.lastChild)) recollectNodeTree(c, unmountOnly);\n\t}\n}\n\n\n\n/** Apply differences in attributes from a VNode to the given DOM Element.\n *\t@param {Element} dom\t\tElement with attributes to diff `attrs` against\n *\t@param {Object} attrs\t\tThe desired end-state key-value attribute pairs\n *\t@param {Object} old\t\t\tCurrent/previous attributes (from previous VNode or element's prop cache)\n */\nfunction diffAttributes(dom, attrs, old) {\n\t// remove attributes no longer present on the vnode by setting them to undefined\n\tlet name;\n\tfor (name in old) {\n\t\tif (!(attrs && name in attrs) && old[name]!=null) {\n\t\t\tsetAccessor(dom, name, old[name], old[name] = undefined, isSvgMode);\n\t\t}\n\t}\n\n\t// add new & update changed attributes\n\tif (attrs) {\n\t\tfor (name in attrs) {\n\t\t\tif (name!=='children' && name!=='innerHTML' && (!(name in old) || attrs[name]!==(name==='value' || name==='checked' ? dom[name] : old[name]))) {\n\t\t\t\tsetAccessor(dom, name, old[name], old[name] = attrs[name], isSvgMode);\n\t\t\t}\n\t\t}\n\t}\n}\n","import { Component } from '../component';\n\n/** Retains a pool of Components for re-use, keyed on component name.\n *\tNote: since component names are not unique or even necessarily available, these are primarily a form of sharding.\n *\t@private\n */\nconst components = {};\n\n\nexport function collectComponent(component) {\n\tlet name = component.constructor.name,\n\t\tlist = components[name];\n\tif (list) list.push(component);\n\telse components[name] = [component];\n}\n\n\nexport function createComponent(Ctor, props, context) {\n\tlet inst = new Ctor(props, context),\n\t\tlist = components[Ctor.name];\n\tComponent.call(inst, props, context);\n\tif (list) {\n\t\tfor (let i=list.length; i--; ) {\n\t\t\tif (list[i].constructor===Ctor) {\n\t\t\t\tinst.nextBase = list[i].nextBase;\n\t\t\t\tlist.splice(i, 1);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn inst;\n}\n","import { SYNC_RENDER, NO_RENDER, FORCE_RENDER, ASYNC_RENDER, ATTR_KEY } from '../constants';\nimport options from '../options';\nimport { isFunction, clone, extend } from '../util';\nimport { enqueueRender } from '../render-queue';\nimport { getNodeProps } from './index';\nimport { diff, mounts, diffLevel, flushMounts, recollectNodeTree } from './diff';\nimport { isFunctionalComponent, buildFunctionalComponent } from './functional-component';\nimport { createComponent, collectComponent } from './component-recycler';\nimport { removeNode } from '../dom/index';\n\n\n\n/** Set a component's `props` (generally derived from JSX attributes).\n *\t@param {Object} props\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.renderSync=false]\tIf `true` and {@link options.syncComponentUpdates} is `true`, triggers synchronous rendering.\n *\t@param {boolean} [opts.render=true]\t\t\tIf `false`, no render will be triggered.\n */\nexport function setComponentProps(component, props, opts, context, mountAll) {\n\tif (component._disable) return;\n\tcomponent._disable = true;\n\n\tif ((component.__ref = props.ref)) delete props.ref;\n\tif ((component.__key = props.key)) delete props.key;\n\n\tif (!component.base || mountAll) {\n\t\tif (component.componentWillMount) component.componentWillMount();\n\t}\n\telse if (component.componentWillReceiveProps) {\n\t\tcomponent.componentWillReceiveProps(props, context);\n\t}\n\n\tif (context && context!==component.context) {\n\t\tif (!component.prevContext) component.prevContext = component.context;\n\t\tcomponent.context = context;\n\t}\n\n\tif (!component.prevProps) component.prevProps = component.props;\n\tcomponent.props = props;\n\n\tcomponent._disable = false;\n\n\tif (opts!==NO_RENDER) {\n\t\tif (opts===SYNC_RENDER || options.syncComponentUpdates!==false || !component.base) {\n\t\t\trenderComponent(component, SYNC_RENDER, mountAll);\n\t\t}\n\t\telse {\n\t\t\tenqueueRender(component);\n\t\t}\n\t}\n\n\tif (component.__ref) component.__ref(component);\n}\n\n\n\n/** Render a Component, triggering necessary lifecycle events and taking High-Order Components into account.\n *\t@param {Component} component\n *\t@param {Object} [opts]\n *\t@param {boolean} [opts.build=false]\t\tIf `true`, component will build and store a DOM node if not already associated with one.\n *\t@private\n */\nexport function renderComponent(component, opts, mountAll, isChild) {\n\tif (component._disable) return;\n\n\tlet skip, rendered,\n\t\tprops = component.props,\n\t\tstate = component.state,\n\t\tcontext = component.context,\n\t\tpreviousProps = component.prevProps || props,\n\t\tpreviousState = component.prevState || state,\n\t\tpreviousContext = component.prevContext || context,\n\t\tisUpdate = component.base,\n\t\tnextBase = component.nextBase,\n\t\tinitialBase = isUpdate || nextBase,\n\t\tinitialChildComponent = component._component,\n\t\tinst, cbase;\n\n\t// if updating\n\tif (isUpdate) {\n\t\tcomponent.props = previousProps;\n\t\tcomponent.state = previousState;\n\t\tcomponent.context = previousContext;\n\t\tif (opts!==FORCE_RENDER\n\t\t\t&& component.shouldComponentUpdate\n\t\t\t&& component.shouldComponentUpdate(props, state, context) === false) {\n\t\t\tskip = true;\n\t\t}\n\t\telse if (component.componentWillUpdate) {\n\t\t\tcomponent.componentWillUpdate(props, state, context);\n\t\t}\n\t\tcomponent.props = props;\n\t\tcomponent.state = state;\n\t\tcomponent.context = context;\n\t}\n\n\tcomponent.prevProps = component.prevState = component.prevContext = component.nextBase = null;\n\tcomponent._dirty = false;\n\n\tif (!skip) {\n\t\tif (component.render) rendered = component.render(props, state, context);\n\n\t\t// context to pass to the child, can be updated via (grand-)parent component\n\t\tif (component.getChildContext) {\n\t\t\tcontext = extend(clone(context), component.getChildContext());\n\t\t}\n\n\t\twhile (isFunctionalComponent(rendered)) {\n\t\t\trendered = buildFunctionalComponent(rendered, context);\n\t\t}\n\n\t\tlet childComponent = rendered && rendered.nodeName,\n\t\t\ttoUnmount, base;\n\n\t\tif (isFunction(childComponent)) {\n\t\t\t// set up high order component link\n\n\t\t\tlet childProps = getNodeProps(rendered);\n\t\t\tinst = initialChildComponent;\n\n\t\t\tif (inst && inst.constructor===childComponent && childProps.key==inst.__key) {\n\t\t\t\tsetComponentProps(inst, childProps, SYNC_RENDER, context);\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoUnmount = inst;\n\n\t\t\t\tinst = createComponent(childComponent, childProps, context);\n\t\t\t\tinst.nextBase = inst.nextBase || nextBase;\n\t\t\t\tinst._parentComponent = component;\n\t\t\t\tcomponent._component = inst;\n\t\t\t\tsetComponentProps(inst, childProps, NO_RENDER, context);\n\t\t\t\trenderComponent(inst, SYNC_RENDER, mountAll, true);\n\t\t\t}\n\n\t\t\tbase = inst.base;\n\t\t}\n\t\telse {\n\t\t\tcbase = initialBase;\n\n\t\t\t// destroy high order component link\n\t\t\ttoUnmount = initialChildComponent;\n\t\t\tif (toUnmount) {\n\t\t\t\tcbase = component._component = null;\n\t\t\t}\n\n\t\t\tif (initialBase || opts===SYNC_RENDER) {\n\t\t\t\tif (cbase) cbase._component = null;\n\t\t\t\tbase = diff(cbase, rendered, context, mountAll || !isUpdate, initialBase && initialBase.parentNode, true);\n\t\t\t}\n\t\t}\n\n\t\tif (initialBase && base!==initialBase && inst!==initialChildComponent) {\n\t\t\tlet baseParent = initialBase.parentNode;\n\t\t\tif (baseParent && base!==baseParent) {\n\t\t\t\tbaseParent.replaceChild(base, initialBase);\n\n\t\t\t\tif (!toUnmount) {\n\t\t\t\t\tinitialBase._component = null;\n\t\t\t\t\trecollectNodeTree(initialBase);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (toUnmount) {\n\t\t\tunmountComponent(toUnmount, base!==initialBase);\n\t\t}\n\n\t\tcomponent.base = base;\n\t\tif (base && !isChild) {\n\t\t\tlet componentRef = component,\n\t\t\t\tt = component;\n\t\t\twhile ((t=t._parentComponent)) {\n\t\t\t\t(componentRef = t).base = base;\n\t\t\t}\n\t\t\tbase._component = componentRef;\n\t\t\tbase._componentConstructor = componentRef.constructor;\n\t\t}\n\t}\n\n\tif (!isUpdate || mountAll) {\n\t\tmounts.unshift(component);\n\t}\n\telse if (!skip) {\n\t\tif (component.componentDidUpdate) {\n\t\t\tcomponent.componentDidUpdate(previousProps, previousState, previousContext);\n\t\t}\n\t\tif (options.afterUpdate) options.afterUpdate(component);\n\t}\n\n\tlet cb = component._renderCallbacks, fn;\n\tif (cb) while ( (fn = cb.pop()) ) fn.call(component);\n\n\tif (!diffLevel && !isChild) flushMounts();\n}\n\n\n\n/** Apply the Component referenced by a VNode to the DOM.\n *\t@param {Element} dom\tThe DOM node to mutate\n *\t@param {VNode} vnode\tA Component-referencing VNode\n *\t@returns {Element} dom\tThe created/mutated element\n *\t@private\n */\nexport function buildComponentFromVNode(dom, vnode, context, mountAll) {\n\tlet c = dom && dom._component,\n\t\toriginalComponent = c,\n\t\toldDom = dom,\n\t\tisDirectOwner = c && dom._componentConstructor===vnode.nodeName,\n\t\tisOwner = isDirectOwner,\n\t\tprops = getNodeProps(vnode);\n\twhile (c && !isOwner && (c=c._parentComponent)) {\n\t\tisOwner = c.constructor===vnode.nodeName;\n\t}\n\n\tif (c && isOwner && (!mountAll || c._component)) {\n\t\tsetComponentProps(c, props, ASYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\t}\n\telse {\n\t\tif (originalComponent && !isDirectOwner) {\n\t\t\tunmountComponent(originalComponent, true);\n\t\t\tdom = oldDom = null;\n\t\t}\n\n\t\tc = createComponent(vnode.nodeName, props, context);\n\t\tif (dom && !c.nextBase) {\n\t\t\tc.nextBase = dom;\n\t\t\t// passing dom/oldDom as nextBase will recycle it if unused, so bypass recycling on L241:\n\t\t\toldDom = null;\n\t\t}\n\t\tsetComponentProps(c, props, SYNC_RENDER, context, mountAll);\n\t\tdom = c.base;\n\n\t\tif (oldDom && dom!==oldDom) {\n\t\t\toldDom._component = null;\n\t\t\trecollectNodeTree(oldDom);\n\t\t}\n\t}\n\n\treturn dom;\n}\n\n\n\n/** Remove a component from the DOM and recycle it.\n *\t@param {Element} dom\t\t\tA DOM node from which to unmount the given Component\n *\t@param {Component} component\tThe Component instance to unmount\n *\t@private\n */\nexport function unmountComponent(component, remove) {\n\tif (options.beforeUnmount) options.beforeUnmount(component);\n\n\t// console.log(`${remove?'Removing':'Unmounting'} component: ${component.constructor.name}`);\n\tlet base = component.base;\n\n\tcomponent._disable = true;\n\n\tif (component.componentWillUnmount) component.componentWillUnmount();\n\n\tcomponent.base = null;\n\n\t// recursively tear down & recollect high-order component children:\n\tlet inner = component._component;\n\tif (inner) {\n\t\tunmountComponent(inner, remove);\n\t}\n\telse if (base) {\n\t\tif (base[ATTR_KEY] && base[ATTR_KEY].ref) base[ATTR_KEY].ref(null);\n\n\t\tcomponent.nextBase = base;\n\n\t\tif (remove) {\n\t\t\tremoveNode(base);\n\t\t\tcollectComponent(component);\n\t\t}\n\t\tlet c;\n\t\twhile ((c=base.lastChild)) recollectNodeTree(c, !remove);\n\t\t// removeOrphanedChildren(base.childNodes, true);\n\t}\n\n\tif (component.__ref) component.__ref(null);\n\tif (component.componentDidUnmount) component.componentDidUnmount();\n}\n","import { FORCE_RENDER } from './constants';\nimport { extend, clone, isFunction } from './util';\nimport { createLinkedState } from './linked-state';\nimport { renderComponent } from './vdom/component';\nimport { enqueueRender } from './render-queue';\n\n/** Base Component class, for the ES6 Class method of creating Components\n *\t@public\n *\n *\t@example\n *\tclass MyFoo extends Component {\n *\t\trender(props, state) {\n *\t\t\treturn <div />;\n *\t\t}\n *\t}\n */\nexport function Component(props, context) {\n\t/** @private */\n\tthis._dirty = true;\n\t// /** @public */\n\t// this._disableRendering = false;\n\t// /** @public */\n\t// this.prevState = this.prevProps = this.prevContext = this.base = this.nextBase = this._parentComponent = this._component = this.__ref = this.__key = this._linkedStates = this._renderCallbacks = null;\n\t/** @public */\n\tthis.context = context;\n\t/** @type {object} */\n\tthis.props = props;\n\t/** @type {object} */\n\tif (!this.state) this.state = {};\n}\n\n\nextend(Component.prototype, {\n\n\t/** Returns a `boolean` value indicating if the component should re-render when receiving the given `props` and `state`.\n\t *\t@param {object} nextProps\n\t *\t@param {object} nextState\n\t *\t@param {object} nextContext\n\t *\t@returns {Boolean} should the component re-render\n\t *\t@name shouldComponentUpdate\n\t *\t@function\n\t */\n\t// shouldComponentUpdate() {\n\t// \treturn true;\n\t// },\n\n\n\t/** Returns a function that sets a state property when called.\n\t *\tCalling linkState() repeatedly with the same arguments returns a cached link function.\n\t *\n\t *\tProvides some built-in special cases:\n\t *\t\t- Checkboxes and radio buttons link their boolean `checked` value\n\t *\t\t- Inputs automatically link their `value` property\n\t *\t\t- Event paths fall back to any associated Component if not found on an element\n\t *\t\t- If linked value is a function, will invoke it and use the result\n\t *\n\t *\t@param {string} key\t\tThe path to set - can be a dot-notated deep key\n\t *\t@param {string} [eventPath]\tIf set, attempts to find the new state value at a given dot-notated path within the object passed to the linkedState setter.\n\t *\t@returns {function} linkStateSetter(e)\n\t *\n\t *\t@example Update a \"text\" state value when an input changes:\n\t *\t\t<input onChange={ this.linkState('text') } />\n\t *\n\t *\t@example Set a deep state value on click\n\t *\t\t<button onClick={ this.linkState('touch.coords', 'touches.0') }>Tap</button\n\t */\n\tlinkState(key, eventPath) {\n\t\tlet c = this._linkedStates || (this._linkedStates = {});\n\t\treturn c[key+eventPath] || (c[key+eventPath] = createLinkedState(this, key, eventPath));\n\t},\n\n\n\t/** Update component state by copying properties from `state` to `this.state`.\n\t *\t@param {object} state\t\tA hash of state properties to update with new values\n\t */\n\tsetState(state, callback) {\n\t\tlet s = this.state;\n\t\tif (!this.prevState) this.prevState = clone(s);\n\t\textend(s, isFunction(state) ? state(s, this.props) : state);\n\t\tif (callback) (this._renderCallbacks = (this._renderCallbacks || [])).push(callback);\n\t\tenqueueRender(this);\n\t},\n\n\n\t/** Immediately perform a synchronous re-render of the component.\n\t *\t@private\n\t */\n\tforceUpdate() {\n\t\trenderComponent(this, FORCE_RENDER);\n\t},\n\n\n\t/** Accepts `props` and `state`, and returns a new Virtual DOM tree to build.\n\t *\tVirtual DOM is generally constructed via [JSX](http://jasonformat.com/wtf-is-jsx).\n\t *\t@param {object} props\t\tProps (eg: JSX attributes) received from parent element/component\n\t *\t@param {object} state\t\tThe component's current state\n\t *\t@param {object} context\t\tContext object (if a parent component has provided context)\n\t *\t@returns VNode\n\t */\n\trender() {}\n\n});\n","// render modes\n\nexport const NO_RENDER = 0;\nexport const SYNC_RENDER = 1;\nexport const FORCE_RENDER = 2;\nexport const ASYNC_RENDER = 3;\n\nexport const EMPTY = {};\n\nexport const ATTR_KEY = typeof Symbol!=='undefined' ? Symbol.for('preactattr') : '__preactattr_';\n\n// DOM properties that should NOT have \"px\" added when numeric\nexport const NON_DIMENSION_PROPS = {\n\tboxFlex:1, boxFlexGroup:1, columnCount:1, fillOpacity:1, flex:1, flexGrow:1,\n\tflexPositive:1, flexShrink:1, flexNegative:1, fontWeight:1, lineClamp:1, lineHeight:1,\n\topacity:1, order:1, orphans:1, strokeOpacity:1, widows:1, zIndex:1, zoom:1\n};\n\n// DOM event types that do not bubble and should be attached via useCapture\nexport const NON_BUBBLING_EVENTS = { blur:1, error:1, focus:1, load:1, resize:1, scroll:1 };\n","import { diff } from './vdom/diff';\n\n/** Render JSX into a `parent` Element.\n *\t@param {VNode} vnode\t\tA (JSX) VNode to render\n *\t@param {Element} parent\t\tDOM element to render into\n *\t@param {Element} [merge]\tAttempt to re-use an existing DOM tree rooted at `merge`\n *\t@public\n *\n *\t@example\n *\t// render a div into <body>:\n *\trender(<div id=\"hello\">hello!</div>, document.body);\n *\n *\t@example\n *\t// render a \"Thing\" component into #foo:\n *\tconst Thing = ({ name }) => <span>{ name }</span>;\n *\trender(<Thing name=\"one\" />, document.querySelector('#foo'));\n */\nexport function render(vnode, parent, merge) {\n\treturn diff(merge, vnode, {}, false, parent);\n}\n"]}